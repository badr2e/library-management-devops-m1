name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  BACKEND_IMAGE_NAME: library-backend
  FRONTEND_IMAGE_NAME: library-frontend
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/library-backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/library-frontend
  REGION: europe-west1
  BACKEND_SERVICE_NAME: library-backend
  FRONTEND_BUCKET: ${{ secrets.GCP_PROJECT_ID }}-frontend
  VERSION: ${{ github.sha }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:${{ env.VERSION }}
            ${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}
            ${{ env.FRONTEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  testing:
    name: Testing
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov

      - name: Run backend tests
        working-directory: ./backend
        env:
          TESTING: "true"
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest -v --cov=./ --cov-report=xml

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

      - name: Pull and test backend container
        env:
          TESTING: "true"
          PROJECT_ID: "dummy-project"
        run: |
          docker pull ${{ env.BACKEND_IMAGE }}:${{ env.VERSION }}
          docker run --name backend-test -d -p 8080:8080 \
            -e TESTING=true \
            -e PROJECT_ID=dummy-project \
            ${{ env.BACKEND_IMAGE }}:${{ env.VERSION }}
          sleep 15
          docker logs backend-test
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8080/api/health || exit 1
          docker stop backend-test

  release:
    name: Release
    needs: [testing]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Release version
        id: set_version
        run: |
          VERSION=$(date +'%Y.%m.%d')-${{ github.run_number }}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release Tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ env.RELEASE_VERSION }}',
              sha: context.sha
            })

      - name: Create Release
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ env.RELEASE_VERSION }}',
              name: 'Release v${{ env.RELEASE_VERSION }}',
              body: 'Release of version ${{ env.RELEASE_VERSION }}',
              draft: false,
              prerelease: false
            })

  deploy:
    name: Deploy
    needs: [release]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    outputs:
      backend_url: ${{ steps.deploy-backend.outputs.url }}

    steps:
      # Authentication et déploiement backend inchangés...

      # DÉPLOIEMENT FRONTEND AMÉLIORÉ AVEC DIAGNOSTIC
      - name: Debug - List workspace contents
        run: |
          pwd
          ls -la
          echo "Current directory structure:"
          find . -type d -maxdepth 3 | sort

      - name: Set up Node.js for Frontend Build
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Debug - Check Next.js config
        run: |
          cat frontend/next.config.js
          cat frontend/package.json

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          npm ci
          echo "Node modules installed:"
          ls -la node_modules | head -n 10

      - name: Modify Next.js config for static export if needed
        working-directory: ./frontend
        run: |
          # Vérifier si la configuration contient déjà output: 'export'
          if ! grep -q "output.*export" next.config.js; then
            # Ajouter output: 'export' dans la configuration Next.js
            sed -i "s/const nextConfig = {/const nextConfig = {\n  output: 'export',/" next.config.js
            echo "Modified next.config.js to add static export configuration"
          else
            echo "Static export configuration already exists"
          fi
          cat next.config.js

      - name: Build Frontend with Backend URL (Verbose)
        working-directory: ./frontend
        env:
          API_URL: ${{ steps.deploy-backend.outputs.url }}/api
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          echo "Backend URL: $API_URL"
          echo "API_URL=$API_URL" > .env.production
          cat .env.production

          # Build avec plus de détails
          npm run build

          # Diagnostiquer le répertoire de build
          echo "Build directory contents:"
          ls -la

          if [ -d "out" ]; then
            echo "out directory exists, contents:"
            ls -la out/
            FRONTEND_DIR="out"
          elif [ -d ".next" ]; then
            echo ".next directory exists, contents:"
            ls -la .next/
            FRONTEND_DIR=".next"
          else
            echo "ERROR: No build output directory found!"
            exit 1
          fi

          # Exporter la variable pour les étapes suivantes
          echo "FRONTEND_DIR=$FRONTEND_DIR" >> $GITHUB_ENV

      - name: Create and configure frontend bucket
        run: |
          echo "Checking if bucket exists..."
          if gsutil ls -b gs://${{ env.FRONTEND_BUCKET }} 2>/dev/null; then
            echo "Bucket exists"
          else
            echo "Creating bucket..."
            gsutil mb -l ${{ env.REGION }} gs://${{ env.FRONTEND_BUCKET }}
          fi

          echo "Setting bucket permissions..."
          gsutil iam ch allUsers:objectViewer gs://${{ env.FRONTEND_BUCKET }}

          echo "Setting web configuration..."
          gsutil web set -m index.html -e index.html gs://${{ env.FRONTEND_BUCKET }}

          echo "Bucket configured:"
          gsutil ls -L -b gs://${{ env.FRONTEND_BUCKET }}

      - name: Deploy Frontend to Cloud Storage (Direct method)
        working-directory: ./frontend
        run: |
          echo "Deploying frontend files from $FRONTEND_DIR directory"

          # Clean bucket first
          echo "Cleaning existing files in bucket..."
          gsutil -m rm -r gs://${{ env.FRONTEND_BUCKET }}/** || echo "Bucket was empty or doesn't exist"

          # Copy files with specific content types
          echo "Copying HTML files..."
          find $FRONTEND_DIR -name "*.html" -type f -exec gsutil -h "Content-Type:text/html" cp {} gs://${{ env.FRONTEND_BUCKET }}/{} \;

          echo "Copying JS files..."
          find $FRONTEND_DIR -name "*.js" -type f -exec gsutil -h "Content-Type:application/javascript" cp {} gs://${{ env.FRONTEND_BUCKET }}/{} \;

          echo "Copying CSS files..."
          find $FRONTEND_DIR -name "*.css" -type f -exec gsutil -h "Content-Type:text/css" cp {} gs://${{ env.FRONTEND_BUCKET }}/{} \;

          echo "Copying all other files..."
          gsutil -m cp -r $FRONTEND_DIR/* gs://${{ env.FRONTEND_BUCKET }}/

          # Verify deployment
          echo "Files in bucket:"
          gsutil ls -r gs://${{ env.FRONTEND_BUCKET }}/

          # Test if index.html exists
          if gsutil stat gs://${{ env.FRONTEND_BUCKET }}/index.html 2>/dev/null; then
            echo "index.html exists in bucket"
          else
            echo "ERROR: index.html not found in bucket!"
            exit 1
          fi

  operate:
    name: Operate
    needs: [deploy]
    runs-on: ubuntu-latest

    steps:
      - name: Verify Backend Health
        run: |
          curl --retry 10 --retry-delay 10 --retry-connrefused ${{ needs.deploy.outputs.backend_url }}/api/health || exit 1

      - name: Verify Frontend Deployment
        run: |
          curl --retry 5 --retry-delay 5 --retry-connrefused https://storage.googleapis.com/${{ env.FRONTEND_BUCKET }}/index.html -o /dev/null -w '%{http_code}\n' | grep -q 200 || exit 1

      - name: Apply Database Migrations or Initialization (if any)
        run: |
          echo "Running any required database migrations or initializations"
          # Ajoutez ici les commandes spécifiques pour les migrations ou l'initialisation

  monitor:
    name: Monitor
    needs: [operate]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Setup Monitoring Alerts (if not already set up)
        run: |
          echo "Setting up or verifying monitoring alerts"
          # Vérifier si des alertes existent déjà
          gcloud monitoring channels describe default --project=${{ env.PROJECT_ID }} || \
          gcloud monitoring channels create --display-name=default --description="Default notification channel" --project=${{ env.PROJECT_ID }}

      - name: Configure Cloud Run Monitoring
        run: |
          echo "Setting up Cloud Run monitoring"
          # Configurer la surveillance de Cloud Run
          # Par exemple, configurer des alertes sur la latence, les erreurs HTTP 5xx, etc.

      - name: Deploy Health Dashboard (if available)
        run: |
          echo "Deploying or verifying application health dashboard"
          # Déployer ou vérifier un tableau de bord de surveillance

      - name: Send Deployment Notification
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"🚀 **Deployment Successful**\nVersion: v${{ env.RELEASE_VERSION }}\nBackend: ${{ needs.deploy.outputs.backend_url }}\nFrontend: https://storage.googleapis.com/${{ env.FRONTEND_BUCKET }}/index.html"}' \
            ${{ secrets.WEBHOOK_URL || 'https://example.com' }}
          echo "Deployment of v${{ env.RELEASE_VERSION }} completed successfully"
