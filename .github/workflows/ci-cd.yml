name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  BACKEND_IMAGE_NAME: library-backend
  FRONTEND_IMAGE_NAME: library-frontend
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/library-backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/library-frontend
  REGION: europe-west1
  BACKEND_SERVICE_NAME: library-backend
  FRONTEND_SERVICE_NAME: library-frontend
  VERSION: ${{ github.sha }}

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python quality tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit safety pylint mypy

      - name: Run Python linting
        working-directory: ./backend
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          pylint --disable=all --enable=unused-import,unused-variable,redefined-outer-name,reimported models routes services

      - name: Run Python security scan
        working-directory: ./backend
        run: |
          bandit -r . -ll -ii -x tests/
          safety check -r requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install Node.js quality tools
        working-directory: ./frontend
        run: |
          npm install -g eslint prettier eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y

      - name: Run JavaScript/TypeScript linting
        working-directory: ./frontend
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:${{ env.VERSION }}
            ${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PROJECT_ID=${{ env.PROJECT_ID }}

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}
            ${{ env.FRONTEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.API_URL || 'https://library-backend-service-url/api' }}

  test-backend:
    name: Test Backend
    needs: [build-backend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov pytest-mock

      - name: Run backend unit tests
        working-directory: ./backend
        env:
          TESTING: "true"
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest -v --cov=./ --cov-report=xml --cov-report=term-missing

      - name: Pull and test backend container
        env:
          TESTING: "true"
          PROJECT_ID: "dummy-project"
        run: |
          docker pull ${{ env.BACKEND_IMAGE }}:${{ env.VERSION }}
          docker run --name backend-test -d -p 8080:8080 \
            -e TESTING=true \
            -e PROJECT_ID=dummy-project \
            ${{ env.BACKEND_IMAGE }}:${{ env.VERSION }}
          sleep 10
          docker logs backend-test
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8080/api/health || exit 1
          docker stop backend-test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend
          flags: backend
          name: backend-codecov

  test-frontend:
    name: Test Frontend
    needs: [build-frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          npm test -- --coverage

      - name: Test frontend build
        working-directory: ./frontend
        run: |
          npm run build

      - name: Pull and test frontend container
        run: |
          docker pull ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}
          docker run --name frontend-test -d -p 3000:3000 ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}
          sleep 10
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:3000 -o /dev/null -w '%{http_code}\n' | grep -q "200\|301\|302" || exit 1
          docker stop frontend-test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend
          flags: frontend
          name: frontend-codecov

  release:
    name: Release
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Release version
        id: set_version
        run: |
          VERSION=$(date +'%Y.%m.%d')-${{ github.run_number }}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release Tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ env.RELEASE_VERSION }}',
              sha: context.sha
            })

      - name: Create Release
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ env.RELEASE_VERSION }}',
              name: 'Release v${{ env.RELEASE_VERSION }}',
              body: 'Release of version ${{ env.RELEASE_VERSION }}',
              draft: false,
              prerelease: false
            })

  deploy:
    name: Deploy
    needs: [release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    outputs:
      backend_url: ${{ steps.deploy-backend.outputs.url }}
      frontend_url: ${{ steps.deploy-frontend.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Create Artifact Registry repository if not exists
        run: |
          gcloud artifacts repositories describe library-management --location=${{ env.REGION }} --project=${{ env.PROJECT_ID }} || \
          gcloud artifacts repositories create library-management --repository-format=docker --location=${{ env.REGION }} --project=${{ env.PROJECT_ID }}

      # DÃ©ploiement du Backend
      - name: Tag and push backend image to Google Artifact Registry
        run: |
          gcloud auth configure-docker --quiet
          docker pull ${{ env.BACKEND_IMAGE }}:${{ env.VERSION }}
          docker tag ${{ env.BACKEND_IMAGE }}:${{ env.VERSION }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/library-management/${{ env.BACKEND_IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/library-management/${{ env.BACKEND_IMAGE_NAME }}:${{ env.VERSION }}

      - name: Deploy Backend to Cloud Run
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.BACKEND_SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/library-management/${{ env.BACKEND_IMAGE_NAME }}:${{ env.VERSION }}

      - name: Make Backend service public
        run: |
          gcloud run services add-iam-policy-binding ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --member="allUsers" \
            --role="roles/run.invoker"

      # DÃ©ploiement du Frontend
      - name: Tag and push frontend image to Google Artifact Registry
        run: |
          docker pull ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}
          docker tag ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/library-management/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/library-management/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.VERSION }}

      - name: Deploy Frontend to Cloud Run
        id: deploy-frontend
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.FRONTEND_SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/library-management/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.VERSION }}
          env_vars: |
            NEXT_PUBLIC_API_URL=${{ steps.deploy-backend.outputs.url }}/api

      - name: Make Frontend service public
        run: |
          gcloud run services add-iam-policy-binding ${{ env.FRONTEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --member="allUsers" \
            --role="roles/run.invoker"

      - name: Apply Database Migrations or Initialization (if any)
        run: |
          echo "Running any required database migrations or initializations"
          # Ajoutez ici les commandes spÃ©cifiques pour les migrations ou l'initialisation

      - name: Set up Cloud Monitoring
        run: |
          gcloud run services update ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --set-cloudrun-observability

          gcloud run services update ${{ env.FRONTEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --set-cloudrun-observability

      - name: Create Deployment Success Notification
        if: success()
        run: |
          echo "ð Deployment of v${{ env.RELEASE_VERSION }} completed successfully"
          echo "Backend URL: ${{ steps.deploy-backend.outputs.url }}"
          echo "Frontend URL: ${{ steps.deploy-frontend.outputs.url }}"
